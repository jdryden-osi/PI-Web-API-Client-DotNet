// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Time;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing TimeRuleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TimeRuleApiTests : CommonApi
    {
        private ITimeRuleApi instance;
        private string webId;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.TimeRule;

            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_TIMERULE_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            webId = response.WebId;


        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of TimeRuleApi
        /// </summary>
        [Test, Order(1)]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TimeRuleApi
            Assert.IsInstanceOf(typeof(TimeRuleApi), instance, "instance is a TimeRuleApi");
        }


        /// <summary>
        /// Test Delete
        /// </summary>
        [Test, Order(5)]
        public void DeleteTest()
        {
            string path = Constants.AF_TIMERULE_PATH;
            var res = instance.DeleteWithHttpInfo(webId);
            StandardPISystem.Refresh();
            var newTimeRule = AFObject.FindObject(path) as AFTimeRule;
            Assert.IsNull(newTimeRule);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test, Order(3)]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PITimeRule>(response, "response is PITimeRule");
            Assert.IsTrue(response.Name == Constants.AF_TIMERULE_NAME);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test, Order(2)]
        public void GetByPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string path = Constants.AF_TIMERULE_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PITimeRule>(response, "response is PITimeRule");
            Assert.IsTrue(response.Name == Constants.AF_TIMERULE_NAME);
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test, Order(4)]
        public void UpdateTest()
        {
            string path = Constants.AF_TIMERULE_PATH;
            PITimeRule timeRule = instance.GetByPath(path, null);
            timeRule.Name = null;
            timeRule.Description = null;
            timeRule.ConfigStringStored = null;
            timeRule.EditorType = null;
            timeRule.IsConfigured = null;
            timeRule.IsInitializing = null;
            timeRule.PlugInName = null;
            timeRule.DisplayString = null;
            timeRule.WebId = null;
            timeRule.Id = null;
            timeRule.Path = null;
            timeRule.Links = null;
            timeRule.ConfigString = "Frequency=400";
            var res = instance.UpdateWithHttpInfo(webId, timeRule);          
            StandardPISystem.Refresh();
            var newTimeRule = AFObject.FindObject(path) as AFTimeRule;
            if (newTimeRule != null)
            {
                Assert.IsTrue(timeRule.ConfigString == newTimeRule.ConfigString);
            }

        }

    }

}
