// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************


using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Asset;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Client;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing ElementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ElementApiTests : CommonApi
    {
        private IElementApi instance;
        private string webId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.Element;
            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_ELEMENT_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of ElementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(ElementApi), instance, "instance is a ElementApi");
        }


        /// <summary>
        /// Test AddReferencedElement
        /// </summary>
        [Test, Order(5)]
        public void AddReferencedElementTest()
        {
            string otherWebId = instance.GetByPath(Constants.AF_ELEMENT_PATH + "2").WebId;
            List<string> referencedElementWebId = new List<string>() { otherWebId };
            string referenceType = "parent-child";
            instance.AddReferencedElement(webId, referencedElementWebId, referenceType);

        }

        /// <summary>
        /// Test CreateAnalysis
        /// </summary>
        [Test]
        public void CreateAnalysisTest()
        {
            string path = Constants.AF_ELEMENT_PATH;
            PIAnalysis analysis = new PIAnalysis()
            {
                Name = "MyNewAnalysis",
                Description = "",
                AnalysisRulePlugInName = "PerformanceEquation",
                GroupId = 0,
                MaximumQueueSize = 0,
                OutputTime = "",
                Priority = "High",
                PublishResults = false,
                Status = "Disabled",
                TemplateName = "",
                TimeRulePlugInName = "Periodic"
            };
            instance.CreateAnalysis(webId, analysis);

            AFElement myElement = AFObject.FindObject(path) as AFElement;
            myElement.Refresh();

            if (myElement != null)
            {

                Assert.IsNotNull(myElement.Analyses[analysis.Name]);
            }

        }

        /// <summary>
        /// Test CreateAttribute
        /// </summary>
        [Test]
        public void CreateAttributeTest()
        {
            string path = Constants.AF_ELEMENT_PATH;
            PIAttribute attribute = new PIAttribute()
            {
                Name = "Water1",
                Description = "2008 Water Use",
                Type = "Int32",
                TypeQualifier = "",
                DataReferencePlugIn = "Table Lookup",
                ConfigString = "SELECT [Water Use] FROM [Energy Use 2008] WHERE [Asset ID] = '%Element%'",
                IsConfigurationItem = false,
                IsHidden = false,
                IsManualDataEntry = false,
            };
            instance.CreateAttribute(webId, attribute);

            AFElement myElement = AFObject.FindObject(path) as AFElement;
            myElement.Refresh();

            if (myElement != null)
            {

                Assert.IsNotNull(myElement.Attributes["Water1"]);
            }
        }

        /// <summary>
        /// Test CreateConfig
        /// </summary>
        [Test]
        public void CreateConfigTest()
        {
            bool? includeChildElements = false;
            var response = instance.CreateConfig(webId, includeChildElements);
            Assert.IsInstanceOf<Object>(response, "response is Object");
        }

        /// <summary>
        /// Test CreateElement
        /// </summary>
        [Test]
        public void CreateElementTest()
        {
            string path = Constants.AF_ELEMENT_PATH;
            PIElement element = new PIElement()
            {
                Name = "B-210",
                Description = "Boiler B-210",
                ExtendedProperties = new Dictionary<string, PIValue>()
            };
            element.ExtendedProperties.Add("Property", new PIValue(12.3));

            instance.CreateElement(webId, element);
            AFElement myElement = AFObject.FindObject(path) as AFElement;
            myElement.Refresh();

            if (myElement != null)
            {

                Assert.IsNotNull(myElement.Elements["B-210"]);
            }

        }

        /// <summary>
        /// Test CreateSearchByAttribute
        /// </summary>
        [Test]
        public void CreateSearchByAttributeTest()
        {
            string templateWebId = client.ElementTemplate.GetByPath(Constants.AF_ELEMENT_TEMPLATE_PATH).WebId;
            List<PIValueQuery> valueQueries = new List<PIValueQuery>();
            valueQueries.Add(new PIValueQuery(Constants.AF_ATTRIBUTE_TEMPLATE_NAME, null, 1000, "LessThan"));
            PISearchByAttribute search = new PISearchByAttribute()
            {
                SearchRoot = null,
                ElementTemplate = templateWebId,
                ValueQueries = valueQueries
            };

            var response = instance.CreateSearchByAttributeWithHttpInfo(search);
            string location = response.Headers.Where(h => h.Key == "Location").First().Value;
            Assert.IsTrue(location.Substring(0, 5) == "https");
            Assert.IsInstanceOf<ApiResponse<PIItemsElement>>(response, "response is Object");

        }

        /// <summary>
        /// Test CreateSecurityEntry
        /// </summary>
        [Test, Order(1)]
        public void CreateSecurityEntryTest()
        {
            PISecurityEntry securityEntry = new PISecurityEntry();
            securityEntry.SecurityIdentityName = Constants.AF_SECURITY_IDENTITY_NAME;
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin" };
            securityEntry.DenyRights = new List<string>() { "ReadWriteData", "Subscribe", "SubscribeOthers", "Annotate", "None" };
            bool? applyToChildren = null;
            instance.CreateSecurityEntry(webId, securityEntry, applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == Constants.AF_SECURITY_IDENTITY_NAME).FirstOrDefault();
            Assert.IsNotNull(secEntry);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            instance.Delete(webId);
            AFDatabase db = StandardPISystem.Databases[Constants.AF_DATABASE_NAME];
            db.Refresh();
            AFElement element = AFObject.FindObject(Constants.AF_ELEMENT_PATH) as AFElement;
            Assert.IsNull(element);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();
        }

        /// <summary>
        /// Test DeleteSecurityEntry
        /// </summary>
        [Test, Order(3)]
        public void DeleteSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            bool? applyToChildren = null;
            instance.DeleteSecurityEntry(webId: webId, name: name, applyToChildren: applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == name).FirstOrDefault();
            Assert.IsNull(secEntry);
        }

        /// <summary>
        /// Test ExecuteSearchByAttribute
        /// </summary>
        [Test]
        public void ExecuteSearchByAttributeTest()
        {
            string templateWebId = client.ElementTemplate.GetByPath(Constants.AF_ELEMENT_TEMPLATE_PATH).WebId;
            List<PIValueQuery> valueQueries = new List<PIValueQuery>();
            valueQueries.Add(new PIValueQuery(Constants.AF_ATTRIBUTE_TEMPLATE_NAME, null, 1000, "LessThan"));
            PISearchByAttribute search = new PISearchByAttribute()
            {
                SearchRoot = null,
                ElementTemplate = templateWebId,
                ValueQueries = valueQueries
            };

            var response2 = instance.CreateSearchByAttributeWithHttpInfo(search);
            string location = response2.Headers.Where(h => h.Key == "Location").First().Value;



            // TODO uncomment below to test the method and replace null with proper value
            string searchId = location.Substring(client.BaseUrl.Length + 28);
            string nameFilter = null;
            string descriptionFilter = null;
            string categoryName = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.ExecuteSearchByAttribute(searchId,
                nameFilter: nameFilter,
                descriptionFilter: descriptionFilter,
                categoryName: categoryName,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<Object>(response, "response is Object");
        }

        /// <summary>
        /// Test FindElementAttributes
        /// </summary>
        [Test]
        public void FindElementAttributesTest()
        {
            string elementNameFilter = null;
            string elementDescriptionFilter = null;
            string elementCategory = null;
            string elementTemplate = null;
            string elementType = null;
            string attributeNameFilter = null;
            string attributeDescriptionFilter = null;
            string attributeCategory = null;
            string attributeType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.FindElementAttributes(webId,
                elementNameFilter: elementNameFilter,
                elementDescriptionFilter: elementDescriptionFilter,
                elementCategory: elementCategory,
                elementTemplate: elementTemplate,
                elementType: elementType,
                attributeNameFilter: attributeNameFilter,
                attributeDescriptionFilter: attributeDescriptionFilter,
                attributeCategory: attributeCategory,
                attributeType: attributeType,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAttribute>(response, "response is PIItemsAttribute");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIElement>(response, "response is PIElement");
            Assert.IsTrue(response.Name == Constants.AF_ELEMENT_NAME);
        }

        /// <summary>
        /// Test GetAnalyses
        /// </summary>
        [Test]
        public void GetAnalysesTest()
        {
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetAnalyses(webId, maxCount, selectedFields, sortField, sortOrder, startIndex);
            Assert.IsInstanceOf<PIItemsAnalysis>(response, "response is PIItemAnalysis");


        }

        /// <summary>
        /// Test GetAttributes
        /// </summary>
        [Test]
        public void GetAttributesTest()
        {
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            string valueType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetAttributes(webId,
                nameFilter: nameFilter,
                categoryName: categoryName,
                templateName: templateName,
                valueType: valueType,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                showExcluded: showExcluded,
                showHidden: showHidden,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAttribute>(response, "response is PIItemsAttribute");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {
            string path = Constants.AF_ELEMENT_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIElement>(response, "response is PIElement");
            Assert.IsTrue(response.Name == Constants.AF_ELEMENT_NAME);
        }

        /// <summary>
        /// Test GetCategories
        /// </summary>
        [Test]
        public void GetCategoriesTest()
        {
            string selectedFields = null;
            var response = instance.GetCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsElementCategory>(response, "response is PIItemsCategory");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetElements
        /// </summary>
        [Test]
        public void GetElementsTest()
        {
            string nameFilter = null;
            string descriptionFilter = null;
            string categoryName = null;
            string templateName = null;
            string elementType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetElements(webId, categoryName, descriptionFilter, elementType, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, templateName);
            Assert.IsInstanceOf<PIItemsElement>(response, "response is PIItemsElement");
            Assert.True(response.Items.Count == 2);
        }

        /// <summary>
        /// Test GetEventFrames
        /// </summary>
        [Test]
        public void GetEventFramesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webId = null;
            //string searchMode = null;
            //string startTime = null;
            //string endTime = null;
            //string nameFilter = null;
            //string categoryName = null;
            //string templateName = null;
            //string sortField = null;
            //string sortOrder = null;
            //int? startIndex = null;
            //int? maxCount = null;
            //string selectedFields = null;
            //var response = instance.GetEventFrames(webId, searchMode, startTime, endTime, nameFilter, categoryName, templateName, sortField, sortOrder, startIndex, maxCount, selectedFields);
            //Assert.IsInstanceOf<PIItemsEventFrame> (response, "response is PIItemsEventFrame");
        }

        /// <summary>
        /// Test GetReferencedElements
        /// </summary>
        [Test, Order(6)]
        public void GetReferencedElementsTest()
        {
            string nameFilter = null;
            string descriptionFilter = null;
            string categoryName = null;
            string templateName = null;
            string elementType = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetReferencedElements(webId, categoryName, descriptionFilter, elementType, maxCount, nameFilter, selectedFields, sortField, sortOrder, startIndex, templateName);
            Assert.IsInstanceOf<PIItemsElement>(response, "response is PIItemsElement");
        }

        /// <summary>
        /// Test GetSecurity
        /// </summary>
        [Test]
        public void GetSecurityTest()
        {
            List<string> userIdentity = new List<string>() { @"marc\marc.adm", @"marc\marc.user" };
            bool? forceRefresh = null;
            string selectedFields = null;
            var response = instance.GetSecurity(webId, userIdentity, forceRefresh, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityRights>(response, "response is PIItemsSecurityRights");
        }

        /// <summary>
        /// Test GetSecurityEntries
        /// </summary>
        [Test]
        public void GetSecurityEntriesTest()
        {
            string nameFilter = null;
            string selectedFields = null;
            var response = instance.GetSecurityEntries(webId, nameFilter, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityEntryByName
        /// </summary>
        [Test]
        public void GetSecurityEntryByNameTest()
        {
            string name = "Administrators";
            string selectedFields = null;
            var response = instance.GetSecurityEntryByName(webId: webId, name: name, selectedFields: selectedFields);
            Assert.IsInstanceOf<PISecurityEntry>(response, "response is PISecurityEntry");
            Assert.IsTrue(response.Name == name);
        }

        /// <summary>
        /// Test RemoveReferencedElement
        /// </summary>
        [Test, Order(7)]
        public void RemoveReferencedElementTest()
        {
            string otherWebId = instance.GetByPath(Constants.AF_ELEMENT_PATH + "2").WebId;
            List<string> referencedElementWebId = new List<string>() { otherWebId };
            instance.RemoveReferencedElement(webId, referencedElementWebId);


        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {

            string path = Constants.AF_ELEMENT_PATH;
            PIElement element = instance.GetByPath(path, null);
            element.Id = null;
            element.Description = "New element description";
            element.Links = null;
            element.Path = null;
            element.WebId = null;
            element.HasChildren = null;
            instance.Update(webId, element);

            StandardPISystem.Refresh();
            AFElement myElement = AFObject.FindObject(path) as AFElement;
            myElement.Refresh();

            if (myElement != null)
            {
                Assert.IsTrue(myElement.Description == element.Description);
            }


        }

        /// <summary>
        /// Test UpdateSecurityEntry
        /// </summary>
        [Test, Order(2)]
        public void UpdateSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin", "Subscribe", "ReadWriteData" };
            securityEntry.DenyRights = new List<string>() { "SubscribeOthers", "Annotate", "None" };
            securityEntry.Name = null;
            securityEntry.Links = null;
            securityEntry.SecurityIdentityName = null;
            bool? applyToChildren = null;
            instance.UpdateSecurityEntry(webId: webId, name: name, securityEntry: securityEntry, applyToChildren: applyToChildren);

            PISecurityEntry securityEntryUpdated = instance.GetSecurityEntryByName(webId: webId, name: name);
            Assert.IsTrue(securityEntry.AllowRights.Count == securityEntryUpdated.AllowRights.Count);
        }

    }

}
