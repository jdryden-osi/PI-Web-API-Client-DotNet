// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Asset;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System.Collections.Generic;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing StreamSetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StreamSetApiTests : CommonApi
    {
        private IStreamSetApi instance;
        private List<string> webIds = null;
        private string webId = null;
        private string attr1webId = null;
        private string attr2webId = null;
        private string attr3webId = null;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.StreamSet;
            base.CreateSampleDatabaseForTests();
            webIds = new List<string>();
            webIds.Add(client.Point.GetByPath(Constants.PI_DATA_SERVER_PATH + @"\sinusoid").WebId);
            webIds.Add(client.Point.GetByPath(Constants.PI_DATA_SERVER_PATH + @"\sinusoidu").WebId);
            webIds.Add(client.Point.GetByPath(Constants.PI_DATA_SERVER_PATH + @"\cdt158").WebId);
            AFElement element = AFObject.FindObject(Constants.AF_ELEMENT_STREAMSET_PATH) as AFElement;
            element.Refresh();
            Assert.IsTrue(element.Attributes.Count == 3);
            webId = client.Element.GetByPath(Constants.AF_ELEMENT_STREAMSET_PATH).WebId;
            attr1webId = client.Attribute.GetByPath(Constants.AF_ELEMENT_STREAMSET_PATH + "|sinusoid").WebId;
            attr2webId = client.Attribute.GetByPath(Constants.AF_ELEMENT_STREAMSET_PATH + "|sinusoidu").WebId;
            attr3webId = client.Attribute.GetByPath(Constants.AF_ELEMENT_STREAMSET_PATH + "|cdt158").WebId;



        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of StreamSetApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(StreamSetApi), instance, "instance is a StreamSetApi");
        }


        /// <summary>
        /// Test GetEnd
        /// </summary>
        [Test]
        public void GetEndTest()
        {
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? searchFullHierarchy = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            string selectedFields = null;
            var response = instance.GetEnd(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, templateName);
            Assert.IsInstanceOf<PIItemsStreamValue>(response, "response is PIItemsStreamValue");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetEndAdHoc
        /// </summary>
        [Test]
        public void GetEndAdHocTest()
        {
            string selectedFields = null;
            var response = instance.GetEndAdHoc(webIds, selectedFields);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
            Assert.IsTrue(response.Items.Count > 0);


        }

        /// <summary>
        /// Test GetInterpolated
        /// </summary>
        [Test]
        public void GetInterpolatedTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            string interval = Constants.TIME_INTERVAL;
            string filterExpression = null;
            bool? includeFilteredValues = null;
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            bool? searchFullHierarchy = null;
            string selectedFields = null;
            string sortField = null;
            string sortOrder = null;
            string syncTime = null;
            string syncTimeBoundaryType = null;
            var response = instance.GetInterpolated(webId, categoryName, endTime, filterExpression, includeFilteredValues, interval, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, templateName, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetInterpolatedAdHoc
        /// </summary>
        [Test]
        public void GetInterpolatedAdHocTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            string interval = Constants.TIME_INTERVAL;
            string filterExpression = null;
            bool? includeFilteredValues = null;
            string selectedFields = null;
            string sortField = null;
            string sortOrder = null;
            var response = instance.GetInterpolatedAdHoc(webIds, endTime, filterExpression, includeFilteredValues, interval, selectedFields, sortField, sortOrder, startTime, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetInterpolatedAtTimes
        /// </summary>
        [Test]
        public void GetInterpolatedAtTimesTest()
        {
            List<string> time = new List<string>() { "*-5d", "*-3d", "*-1d" };
            string timeZone = null;
            string filterExpression = null;
            bool? includeFilteredValues = null;
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            bool? searchFullHierarchy = null;
            string sortOrder = null;
            string selectedFields = null;
            var response = instance.GetInterpolatedAtTimes(webId, time, categoryName, filterExpression, includeFilteredValues, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetInterpolatedAtTimesAdHoc
        /// </summary>
        [Test]
        public void GetInterpolatedAtTimesAdHocTest()
        {
            List<string> time = new List<string>() { "*-5d", "*-3d", "*-1d" };
            string timeZone = null;
            string filterExpression = null;
            bool? includeFilteredValues = null;
            string sortOrder = null;
            string selectedFields = null;
            var response = instance.GetInterpolatedAtTimesAdHoc(time, webIds, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
        }

        /// <summary>
        /// Test GetPlot
        /// </summary>
        [Test]
        public void GetPlotTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            int? intervals = null;
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            bool? searchFullHierarchy = null;
            string selectedFields = null;
            string sortField = null;
            string sortOrder = null;
            var response = instance.GetPlot(webId, categoryName, endTime, intervals, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
        }

        /// <summary>
        /// Test GetPlotAdHoc
        /// </summary>
        [Test]
        public void GetPlotAdHocTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            int? intervals = null;
            string selectedFields = null;
            string sortField = null;
            string sortOrder = null;
            var response = instance.GetPlotAdHoc(webIds, endTime, intervals, selectedFields, sortField, sortOrder, startTime, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetRecorded
        /// </summary>
        [Test]
        public void GetRecordedTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            string boundaryType = null;
            string filterExpression = null;
            bool? includeFilteredValues = null;
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            string sortField = null;
            string sortOrder = null;
            bool? searchFullHierarchy = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetRecorded(webId, boundaryType, categoryName, endTime, filterExpression, includeFilteredValues, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder,startTime, templateName, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
        }

        /// <summary>
        /// Test GetRecordedAdHoc
        /// </summary>
        [Test]
        public void GetRecordedAdHocTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            string boundaryType = null;
            string filterExpression = null;
            bool? includeFilteredValues = null;
            int? maxCount = null;
            string selectedFields = null;
            string sortField = null;
            string sortOrder = null;
            var response = instance.GetRecordedAdHoc(webIds, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, sortField, sortOrder, startTime, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetRecordedAtTime
        /// </summary>
        [Test]
        public void GetRecordedAtTimeTest()
        {
            string time = "*-3d";
            string timeZone = null;
            string retrievalMode = null;
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            bool? searchFullHierarchy = null;
            string selectedFields = null;
            var response = instance.GetRecordedAtTime(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, templateName, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValues>(response, "response is PIItemsStreamValues");
        }

        /// <summary>
        /// Test GetRecordedAtTimeAdHoc
        /// </summary>
        [Test]
        public void GetRecordedAtTimeAdHocTest()
        {
            string time = "*-3d";
            string timeZone = null;
            string retrievalMode = null;
            string selectedFields = null;
            var response = instance.GetRecordedAtTimeAdHoc(time, webIds, timeZone: timeZone, retrievalMode: retrievalMode, selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsStreamValue>(response, "response is PIItemsStreamValue");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSummaries
        /// </summary>
        [Test]
        public void GetSummariesTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            List<string> summaryType = null;
            string calculationBasis = null;
            string timeType = null;
            string summaryDuration = null;
            string sampleType = null;
            string sampleInterval = null;
            string filterExpression = null;
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            bool? searchFullHierarchy = null;
            string selectedFields = null;
            var response = instance.GetSummaries(webId, calculationBasis, categoryName, endTime, filterExpression, nameFilter, sampleInterval, sampleType, searchFullHierarchy, selectedFields, showExcluded, showHidden, startTime, summaryDuration, summaryType, templateName, timeType, timeZone);
            Assert.IsInstanceOf<PIItemsStreamSummaries>(response, "response is PIItemsStreamSummaries");
        }

        /// <summary>
        /// Test GetSummariesAdHoc
        /// </summary>
        [Test]
        public void GetSummariesAdHocTest()
        {
            string startTime = Constants.TIME_START;
            string endTime = Constants.TIME_END;
            string timeZone = null;
            List<string> summaryType = null;
            string calculationBasis = null;
            string timeType = null;
            string summaryDuration = null;
            string sampleType = null;
            string sampleInterval = null;
            string filterExpression = null;
            string selectedFields = null;
            var response = instance.GetSummariesAdHoc(webIds, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone);
            Assert.IsInstanceOf<PIItemsStreamSummaries>(response, "response is PIItemsStreamSummaries");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetValues
        /// </summary>
        [Test]
        public void GetValuesTest()
        {
            string time = null;
            string timeZone = null;
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            bool? searchFullHierarchy = null;
            string selectedFields = null;
            var response = instance.GetValues(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, templateName, time, timeZone);
            Assert.IsInstanceOf<PIItemsStreamValue>(response, "response is PIItemsStreamValue");
        }

        /// <summary>
        /// Test GetValuesAdHoc
        /// </summary>
        [Test]
        public void GetValuesAdHocTest()
        {
            string time = "*";
            string timeZone = null;
            string selectedFields = null;
            var response = instance.GetValuesAdHoc(webId: webIds, time: time, timeZone: timeZone, selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsStreamValue>(response, "response is PIItemsStreamValue");
            Assert.IsTrue(response.Items.Count > 0);
        }


        /// <summary>
        /// Test UpdateValue
        /// </summary>
        [Test]
        public void UpdateValueTest()
        {
            var currentTime = "*-1d";
            PITimedValue attr1tv = new PITimedValue()
            {
                Timestamp = currentTime,
                Value = 20
            };
            PITimedValue attr2tv = new PITimedValue()
            {
                Timestamp = currentTime,
                Value = 21
            };
            PITimedValue attr3tv = new PITimedValue()
            {
                Timestamp = currentTime,
                Value = 22
            };


            List<PIStreamValue> values = new List<PIStreamValue>();
            values.Add(new PIStreamValue(attr1webId, null, null, attr1tv));
            values.Add(new PIStreamValue(attr2webId, null, null, attr2tv));
            values.Add(new PIStreamValue(attr3webId, null, null, attr3tv));
            string updateOption = "Replace";
            string bufferOption = "BufferIfPossible";
            instance.UpdateValue(webId: webId, values: values, updateOption: updateOption, bufferOption: bufferOption);

        }

        /// <summary>
        /// Test UpdateValueAdHoc
        /// </summary>
        [Test]
        public void UpdateValueAdHocTest()
        {
            var currentTime = "*-1d";
            PITimedValue attr1tv = new PITimedValue()
            {
                Timestamp = currentTime,
                Value = 20
            };
            PITimedValue attr2tv = new PITimedValue()
            {
                Timestamp = currentTime,
                Value = 21
            };
            PITimedValue attr3tv = new PITimedValue()
            {
                Timestamp = currentTime,
                Value = 22
            };




            List<PIStreamValue> values = new List<PIStreamValue>();
            values.Add(new PIStreamValue(attr1webId, null, null, attr1tv));
            values.Add(new PIStreamValue(attr2webId, null, null, attr2tv));
            values.Add(new PIStreamValue(attr3webId, null, null, attr3tv));

            string updateOption = "Replace";
            string bufferOption = "BufferIfPossible";
            instance.UpdateValueAdHoc(values: values, updateOption: updateOption, bufferOption: bufferOption);
        }

        /// <summary>
        /// Test UpdateValues
        /// </summary>
        [Test]
        public void UpdateValuesTest()
        {

            var time1 = "*-1d";
            var time2 = "*-2d";
            List<PITimedValue> attr1tv = new List<PITimedValue>();
            List<PITimedValue> attr2tv = new List<PITimedValue>();
            List<PITimedValue> attr3tv = new List<PITimedValue>();
            attr1tv.Add(new PITimedValue(time1, null, null, null, null, 25));
            attr1tv.Add(new PITimedValue(time2, null, null, null, null, 35));
            attr2tv.Add(new PITimedValue(time1, null, null, null, null, 45));
            attr2tv.Add(new PITimedValue(time2, null, null, null, null, 55));
            attr3tv.Add(new PITimedValue(time1, null, null, null, null, 65));
            attr3tv.Add(new PITimedValue(time2, null, null, null, null, 75));



            PIStreamValues streamValues1 = new PIStreamValues(attr1webId, null, null, attr1tv);
            PIStreamValues streamValues2 = new PIStreamValues(attr2webId, null, null, attr2tv);
            PIStreamValues streamValues3 = new PIStreamValues(attr3webId, null, null, attr3tv);




            List<PIStreamValues> values = new List<PIStreamValues>();
            values.Add(streamValues1);
            values.Add(streamValues2);
            values.Add(streamValues3);
            string updateOption = "Replace";
            string bufferOption = "BufferIfPossible";
            instance.UpdateValues(webId: webId, values: values, updateOption: updateOption, bufferOption: bufferOption);

        }

        /// <summary>
        /// Test UpdateValuesAdHoc
        /// </summary>
        [Test]
        public void UpdateValuesAdHocTest()
        {

            var time1 = "*-1d";
            var time2 = "*-2d";
            List<PITimedValue> attr1tv = new List<PITimedValue>();
            List<PITimedValue> attr2tv = new List<PITimedValue>();
            List<PITimedValue> attr3tv = new List<PITimedValue>();
            attr1tv.Add(new PITimedValue(time1, null, null, null, null, 25));
            attr1tv.Add(new PITimedValue(time2, null, null, null, null, 35));
            attr2tv.Add(new PITimedValue(time1, null, null, null, null, 45));
            attr2tv.Add(new PITimedValue(time2, null, null, null, null, 55));
            attr3tv.Add(new PITimedValue(time1, null, null, null, null, 65));
            attr3tv.Add(new PITimedValue(time2, null, null, null, null, 75));

            PIStreamValues streamValues1 = new PIStreamValues(webIds[0], null, null, attr1tv);
            PIStreamValues streamValues2 = new PIStreamValues(webIds[1], null, null, attr2tv);
            PIStreamValues streamValues3 = new PIStreamValues(webIds[2], null, null, attr3tv);

            List<PIStreamValues> values = new List<PIStreamValues>();
            values.Add(streamValues1);
            values.Add(streamValues2);
            values.Add(streamValues3);
            string updateOption = "Replace";
            string bufferOption = "BufferIfPossible";
            instance.UpdateValuesAdHoc(values: values, updateOption: updateOption, bufferOption: bufferOption);

        }

    }

}
