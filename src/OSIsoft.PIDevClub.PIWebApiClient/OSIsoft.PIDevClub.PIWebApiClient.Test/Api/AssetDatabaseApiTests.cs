// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.EventFrame;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing AssetDataApiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetDatabaseApiTests : CommonApi
    {
        private IAssetDatabaseApi instance;
        private string webId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.AssetDatabase;
            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_DATABASE_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of AssetDataApiApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(AssetDatabaseApi), instance, "instance is a AssetDataApiApi");
        }


        /// <summary>
        /// Test AddReferencedElement
        /// </summary>
        [Test, Order(1)]
        public void AddReferencedElementTest()
        {
            string path1 = Constants.AF_ELEMENT_PATH + @"\" + Constants.AF_ELEMENT_NAME + "Child1";
            string path2 = Constants.AF_ELEMENT_PATH + @"\" + Constants.AF_ELEMENT_NAME + "Child2";
            string webId1 = client.Element.GetByPath(path1).WebId;
            string webId2 = client.Element.GetByPath(path2).WebId;
            List<string> referencedElementWebId = new List<string>() { webId1, webId2 };
            string referenceType = "parent-child";
            instance.AddReferencedElement(webId, referencedElementWebId, referenceType);

            string path = Constants.AF_DATABASE_PATH;
            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            if (db != null)
            {
                Assert.IsNotNull(db.Elements[Constants.AF_ELEMENT_NAME + "Child1"]);
                Assert.IsNotNull(db.Elements[Constants.AF_ELEMENT_NAME + "Child2"]);
            }


        }

        /// <summary>
        /// Test CreateAnalysisCategory
        /// </summary>
        [Test]
        public void CreateAnalysisCategoryTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIAnalysisCategory analysisCategory = new PIAnalysisCategory(null, null, "AnalysisSwaggerCategory", "Description...");
            instance.CreateAnalysisCategory(webId, analysisCategory);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.AnalysisCategories[analysisCategory.Name]);

        }

        /// <summary>
        /// Test CreateAnalysisTemplate
        /// </summary>
        [Test]
        public void CreateAnalysisTemplateTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIAnalysisTemplate template = new PIAnalysisTemplate(null, null, "AnalysisTemplateSwagger", "Description123");
            instance.CreateAnalysisTemplate(webId, template);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.AnalysisTemplates[template.Name]);

        }

        /// <summary>
        /// Test CreateAttributeCategory
        /// </summary>
        [Test]
        public void CreateAttributeCategoryTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIAttributeCategory attributeCategory = new PIAttributeCategory(null, null, "SwaggerAttributeCategory2Test", "Description...");
            instance.CreateAttributeCategory(webId, attributeCategory);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.AttributeCategories[attributeCategory.Name]);
        }

        /// <summary>
        /// Test CreateElement
        /// </summary>
        [Test]
        public void CreateElementTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIElement element = new PIElement(null, null, "SwaggerElementTest");
            instance.CreateElement(webId, element);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.Elements[element.Name]);

        }

        /// <summary>
        /// Test CreateElementCategory
        /// </summary>
        [Test]
        public void CreateElementCategoryTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIElementCategory elementCategory = new PIElementCategory(null, null, "elementCategorySwagger");
            instance.CreateElementCategory(webId, elementCategory);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.ElementCategories[elementCategory.Name]);
        }

        /// <summary>
        /// Test CreateElementTemplate
        /// </summary>
        [Test]
        public void CreateElementTemplateTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIElementTemplate template = new PIElementTemplate(null, null, "ElementTemplate", "Description..");
            instance.CreateElementTemplate(webId, template);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.ElementTemplates[template.Name]);

        }

        /// <summary>
        /// Test CreateEnumerationSet
        /// </summary>
        [Test]
        public void CreateEnumerationSetTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIEnumerationSet enumerationSet = new PIEnumerationSet(null, null, "EnumerationSetSwagger", "Description...");
            instance.CreateEnumerationSet(webId, enumerationSet);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.EnumerationSets[enumerationSet.Name]);

        }

        /// <summary>
        /// Test CreateEventFrame
        /// </summary>
        [Test]
        public void CreateEventFrameTest()
        {
            string path = Constants.AF_DATABASE_PATH;

            PIEventFrame eventFrame = new PIEventFrame()
            {
                Name = Constants.AF_EVENT_FRAME_NAME + "3",
                StartTime = "*-2d",
                EndTime = "*-1d"
            };
            instance.CreateEventFrame(webId, eventFrame);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;

            var results = AFEventFrame.FindEventFrames(db, null, string.Empty, AFSearchField.Name, true, AFSortField.Name, AFSortOrder.Ascending, 0, 100);
            Assert.IsTrue(results.Where(ev => ev.Name == eventFrame.Name).Count() == 1);
        }

        /// <summary>
        /// Test CreateSecurityEntry
        /// </summary>
        [Test]
        public void CreateSecurityEntryTest()
        {
            string securityItem = null;
            PISecurityEntry securityEntry = new PISecurityEntry();
            securityEntry.SecurityIdentityName = Constants.AF_SECURITY_IDENTITY_NAME;
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin" };
            securityEntry.DenyRights = new List<string>() { "ReadWriteData", "Subscribe", "SubscribeOthers", "Annotate", "None" };
            bool? applyToChildren = null;
            instance.CreateSecurityEntry(webId, securityEntry: securityEntry, securityItem: securityItem, applyToChildren: applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == Constants.AF_SECURITY_IDENTITY_NAME).FirstOrDefault();
            Assert.IsNotNull(secEntry);
        }

        /// <summary>
        /// Test CreateTable
        /// </summary>
        [Test]
        public void CreateTableTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PITable table = new PITable(null, null, "TableTestNameSwagger", "Description for table");
            instance.CreateTable(webId, table);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.Tables[table.Name]);
        }

        /// <summary>
        /// Test CreateTableCategory
        /// </summary>
        [Test]
        public void CreateTableCategoryTest()
        {

            string path = Constants.AF_DATABASE_PATH;
            PITableCategory tableCategory = new PITableCategory(null, null, "Table1SwaggerCategory", "Description...");
            instance.CreateTableCategory(webId, tableCategory);

            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            Assert.IsNotNull(db.TableCategories[tableCategory.Name]);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            instance.Delete(webId);
            StandardPISystem.Refresh();
            AFDatabase db = AFObject.FindObject(Constants.AF_DATABASE_NAME) as AFDatabase;
            Assert.IsNull(db);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();
        }

        /// <summary>
        /// Test DeleteSecurityEntry
        /// </summary>
        [Test]
        public void DeleteSecurityEntryTest()
        {

            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            bool? applyToChildren = null;
            instance.DeleteSecurityEntry(name, webId, securityItem: null, applyToChildren: applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == name).FirstOrDefault();
            Assert.IsNull(secEntry);
        }

        /// <summary>
        /// Test Export
        /// </summary>
        [Test]
        public void ExportTest()
        {
            List<string> exportMode = new List<string>() { "StrongReferences" };
            string startTime = null;
            string endTime = null;
            var response = instance.Export(webId, exportMode: exportMode, startTime: startTime, endTime: endTime);
            Assert.IsInstanceOf<Object>(response, "response is Object");
        }

        /// <summary>
        /// Test FindAnalyses
        /// </summary>
        [Test]
        public void FindAnalysesTest()
        {
            List<string> field = new List<string>() { "Name" };
            string query = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.FindAnalyses(webId, field: field, query: query, sortField: sortField, sortOrder: sortOrder, startIndex: startIndex, maxCount: maxCount, selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAnalysis>(response, "response is PIItemsAnalysis");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test FindElementAttributes
        /// </summary>
        [Test]
        public void FindElementAttributesTest()
        {
            string elementNameFilter = null;
            string elementDescriptionFilter = null;
            string elementCategory = null;
            string elementTemplate = null;
            string elementType = null;
            string attributeNameFilter = null;
            string attributeDescriptionFilter = null;
            string attributeCategory = null;
            string attributeType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.FindElementAttributes(webId,
                elementNameFilter: elementNameFilter,
                elementDescriptionFilter: elementDescriptionFilter,
                elementCategory: elementCategory,
                elementTemplate: elementTemplate,
                elementType: elementType,
                attributeNameFilter: attributeNameFilter,
                attributeDescriptionFilter: attributeDescriptionFilter,
                attributeCategory: attributeCategory,
                attributeType: attributeType,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAttribute>(response, "response is PIItemsAttribute");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test FindEventFrameAttributes
        /// </summary>
        [Test]
        public void FindEventFrameAttributesTest()
        {
            string searchMode = null;
            string startTime = null;
            string endTime = null;
            string eventFrameNameFilter = null;
            string eventFrameDescriptionFilter = null;
            string referencedElementNameFilter = null;
            string eventFrameCategory = null;
            string eventFrameTemplate = null;
            string attributeNameFilter = null;
            string attributeDescriptionFilter = null;
            string attributeCategory = null;
            string attributeType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.FindEventFrameAttributes(webId,
                searchMode: searchMode,
                startTime: startTime,
                endTime: endTime,
                eventFrameNameFilter: eventFrameNameFilter,
                eventFrameDescriptionFilter: eventFrameDescriptionFilter,
                referencedElementNameFilter: referencedElementNameFilter,
                eventFrameCategory: eventFrameCategory,
                eventFrameTemplate: eventFrameTemplate,
                attributeNameFilter: attributeNameFilter,
                attributeDescriptionFilter: attributeDescriptionFilter,
                attributeCategory: attributeCategory,
                attributeType: attributeType,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAttribute>(response, "response is PIItemsAttribute");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIAssetDatabase>(response, "response is PIAssetDatabase");
            Assert.IsTrue(response.Name == Constants.AF_DATABASE_NAME);
        }

        /// <summary>
        /// Test GetAnalysisCategories
        /// </summary>
        [Test]
        public void GetAnalysisCategoriesTest()
        {

            string selectedFields = null;
            var response = instance.GetAnalysisCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAnalysisCategory>(response, "response is PIItemsCategory");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetAnalysisTemplates
        /// </summary>
        [Test]
        public void GetAnalysisTemplatesTest()
        {
            List<string> field = new List<string>() { "Name" };
            string query = Constants.AF_ANALYSIS_TEMPLATE_NAME;
            string sortField = null;
            string sortOrder = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetAnalysisTemplates(webId,
                field: field,
                query: query,
                sortField: sortField,
                sortOrder: sortOrder,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAnalysisTemplate>(response, "response is PIItemsAnalysisTemplate");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetAttributeCategories
        /// </summary>
        [Test]
        public void GetAttributeCategoriesTest()
        {
            string selectedFields = null;
            var response = instance.GetAttributeCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAttributeCategory>(response, "response is PIItemsCategory");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIAssetDatabase>(response, "response is PIAssetDatabase");
            Assert.IsTrue(response.Name == Constants.AF_DATABASE_NAME);
        }

        /// <summary>
        /// Test GetElementCategories
        /// </summary>
        [Test]
        public void GetElementCategoriesTest()
        {
            string selectedFields = null;
            var response = instance.GetElementCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsElementCategory>(response, "response is PIItemsCategory");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetElementTemplates
        /// </summary>
        [Test]
        public void GetElementTemplatesTest()
        {
            List<string> field = new List<string>() { "Name" };
            string query = Constants.AF_ELEMENT_TEMPLATE_NAME;
            string sortField = null;
            string sortOrder = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetElementTemplates(webId,
                field: field,
                query: query,
                sortField: sortField,
                sortOrder: sortOrder,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsElementTemplate>(response, "response is PIItemsElementTemplate");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetElements
        /// </summary>
        [Test]
        public void GetElementsTest()
        {
            string nameFilter = null;
            string descriptionFilter = null;
            string categoryName = null;
            string templateName = null;
            string elementType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetElements(webId,
                nameFilter: nameFilter,
                descriptionFilter: descriptionFilter,
                categoryName: categoryName,
                templateName: templateName,
                elementType: elementType,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsElement>(response, "response is PIItemsElement");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetEnumerationSets
        /// </summary>
        [Test]
        public void GetEnumerationSetsTest()
        {
            string selectedFields = null;
            var response = instance.GetEnumerationSets(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsEnumerationSet>(response, "response is PIItemsEnumerationSet");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetEventFrames
        /// </summary>
        [Test]
        public void GetEventFramesTest()
        {
            string searchMode = null;
            string startTime = null;
            string endTime = null;
            string nameFilter = null;
            string referencedElementNameFilter = null;
            string categoryName = null;
            string templateName = null;
            string referencedElementTemplateName = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetEventFrames(webId,
                searchMode: searchMode,
                startTime: startTime,
                endTime: endTime,
                nameFilter: nameFilter,
                referencedElementNameFilter: referencedElementNameFilter,
                categoryName: categoryName,
                templateName: templateName,
                referencedElementTemplateName: referencedElementTemplateName,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsEventFrame>(response, "response is PIItemsEventFrame");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetReferencedElements
        /// </summary>
        [Test]
        public void GetReferencedElementsTest()
        {
            AddReferencedElementTest();
            // TODO uncomment below to test the method and replace null with proper value
            //string webId = null;
            string nameFilter = null;
            string descriptionFilter = null;
            string categoryName = null;
            string templateName = null;
            string elementType = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetReferencedElements(webId,
                nameFilter: nameFilter,
                descriptionFilter: descriptionFilter,
                categoryName: categoryName,
                templateName: templateName,
                elementType: elementType,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsElement>(response, "response is PIItemsElement");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurity
        /// </summary>
        [Test]
        public void GetSecurityTest()
        {
            List<string> securityItem = new List<string>() { "Default" };
            List<string> userIdentity = new List<string>() { @"marc\marc.adm", @"marc\marc.user" };
            bool? forceRefresh = null;
            string selectedFields = null;
            var response = instance.GetSecurity(webId, securityItem, userIdentity, forceRefresh, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityRights>(response, "response is PIItemsSecurityRights");
        }

        /// <summary>
        /// Test GetSecurityEntries
        /// </summary>
        [Test]
        public void GetSecurityEntriesTest()
        {
            string nameFilter = null;
            string selectedFields = null;
            var response = instance.GetSecurityEntries(webId, nameFilter, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityEntryByName
        /// </summary>
        [Test]
        public void GetSecurityEntryByNameTest()
        {

            string name = "Administrators";
            string securityItem = null;
            string selectedFields = null;
            var response = instance.GetSecurityEntryByName(webId: webId, name: name, securityItem: securityItem, selectedFields: selectedFields);
            Assert.IsInstanceOf<PISecurityEntry>(response, "response is PISecurityEntry");
        }

        /// <summary>
        /// Test GetTableCategories
        /// </summary>
        [Test]
        public void GetTableCategoriesTest()
        {
            string selectedFields = null;
            var response = instance.GetTableCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsTableCategory>(response, "response is PIItemsCategory");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetTables
        /// </summary>
        [Test]
        public void GetTablesTest()
        {
            string selectedFields = null;
            var response = instance.GetTables(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsTable>(response, "response is PIItemsTable");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test Import
        /// </summary>
        [Test]
        public void ImportTest()
        {

            List<string> importMode = new List<string>() { "AllowCreate | AllowUpdate | AutoCheckIn" };
            instance.Import(webId, importMode);

        }

        /// <summary>
        /// Test RemoveReferencedElement
        /// </summary>
        [Test, Order(2)]
        public void RemoveReferencedElementTest()
        {
            AddReferencedElementTest();
            string path = Constants.AF_DATABASE_PATH;
            AFDatabase db = AFObject.FindObject(path) as AFDatabase;
            db.Refresh();
            if (db != null)
            {
                Assert.IsNotNull(db.Elements[Constants.AF_ELEMENT_NAME + "Child1"]);
                Assert.IsNotNull(db.Elements[Constants.AF_ELEMENT_NAME + "Child2"]);
            }

            string path1 = Constants.AF_ELEMENT_PATH + @"\" + Constants.AF_ELEMENT_NAME + "Child1";
            string path2 = Constants.AF_ELEMENT_PATH + @"\" + Constants.AF_ELEMENT_NAME + "Child2";
            string webId1 = client.Element.GetByPath(path1).WebId;
            string webId2 = client.Element.GetByPath(path2).WebId;
            List<string> referencedElementWebId = new List<string>() { webId1, webId2 };
            instance.RemoveReferencedElement(webId, referencedElementWebId);


            db.Refresh();
            if (db != null)
            {
                Assert.IsNull(db.Elements[Constants.AF_ELEMENT_NAME + "Child1"]);
                Assert.IsNull(db.Elements[Constants.AF_ELEMENT_NAME + "Child2"]);
            }



        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            string path = Constants.AF_DATABASE_PATH;
            PIAssetDatabase database = instance.GetByPath(path, null);
            database.Id = null;
            database.Description = "New swagger db description";
            database.Links = null;
            database.Path = null;
            database.WebId = null;
            instance.Update(webId, database);

            StandardPISystem.Refresh();
            AFDatabase db = AFObject.FindObject(path) as AFDatabase;

            if (db != null)
            {
                Assert.IsTrue(db.Description == database.Description);
            }
        }

        /// <summary>
        /// Test UpdateSecurityEntry
        /// </summary>
        [Test]
        public void UpdateSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin", "Subscribe", "ReadWriteData" };
            securityEntry.DenyRights = new List<string>() { "SubscribeOthers", "Annotate", "None" };
            securityEntry.Name = null;
            securityEntry.Links = null;
            securityEntry.SecurityIdentityName = null;
            bool? applyToChildren = null;
            instance.UpdateSecurityEntry(name, webId, securityEntry: securityEntry, applyToChildren: applyToChildren, securityItem: null);

            PISecurityEntry securityEntryUpdated = instance.GetSecurityEntryByName(webId: webId, name: name);
            Assert.IsTrue(securityEntry.AllowRights.Count == securityEntryUpdated.AllowRights.Count);
        }

    }

}
