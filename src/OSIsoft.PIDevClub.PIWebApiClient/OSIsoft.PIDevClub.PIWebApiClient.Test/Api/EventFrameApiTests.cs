// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Data;
using OSIsoft.AF.EventFrame;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Client;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing EventFrameApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventFrameApiTests : CommonApi
    {
        private IEventFrameApi instance;
        private string webId;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.EventFrame;
            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_EVENT_FRAME_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of EventFrameApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventFrameApi
            Assert.IsInstanceOf(typeof(EventFrameApi), instance, "instance is a EventFrameApi");
        }


        /// <summary>
        /// Test Acknowledge
        /// </summary>
        [Test]
        public void AcknowledgeTest()
        {
            instance.Acknowledge(webId);
            string path = Constants.AF_EVENT_FRAME_PATH;
            AFEventFrame myEventFrame = AFObject.FindObject(path) as AFEventFrame;
            myEventFrame.Refresh();
            Assert.IsTrue(myEventFrame.IsAcknowledged == true);

        }

        /// <summary>
        /// Test CaptureValues
        /// </summary>
        [Test]
        public void CaptureValuesTest()
        {
            instance.CaptureValues(webId);
            string path = Constants.AF_EVENT_FRAME_PATH;
            AFEventFrame myEventFrame = AFObject.FindObject(path) as AFEventFrame;
            myEventFrame.Refresh();
            Assert.IsTrue(myEventFrame.AreValuesCaptured == true);
        }

        /// <summary>
        /// Test CreateAnnotation
        /// </summary>
        [Test, Order(1)]
        public void CreateAnnotationTest()
        {

            PIAnnotation annotation = new PIAnnotation()
            {
                Name = Constants.AF_EVENT_FRAME_ANNOTATION_NAME + "2",
                Value = "MainValue"
            };
            instance.CreateAnnotation(webId, annotation);

            string path = Constants.AF_EVENT_FRAME_PATH;
            AFDatabase db = StandardPISystem.Databases[Constants.AF_DATABASE_NAME];
            db.Refresh();
            AFEventFrame eventFrame = AFObject.FindObject(path) as AFEventFrame;
            IList<AFAnnotation> annotations = eventFrame.GetAnnotations();
            Assert.IsNotNull(annotations.Where(m => m.Name == annotation.Name).FirstOrDefault());

        }

        /// <summary>
        /// Test CreateAttribute
        /// </summary>
        [Test]
        public void CreateAttributeTest()
        {
            PIAttribute attribute = new PIAttribute()
            {
                Name = "WaterEventFrame",
                Description = "2008 Water Use",
                Type = "Int32",
                TypeQualifier = "",
                DataReferencePlugIn = "Table Lookup",
                ConfigString = "SELECT [Water Use] FROM [Energy Use 2008] WHERE [Asset ID] = '%Element%'",
                IsConfigurationItem = false,
                IsHidden = false,
                IsManualDataEntry = false,
            };
            instance.CreateAttribute(webId, attribute);

            string path = Constants.AF_EVENT_FRAME_PATH;
            AFEventFrame myEventFrame = AFObject.FindObject(path) as AFEventFrame;
            myEventFrame.Refresh();

            if (myEventFrame != null)
            {
                Assert.IsNotNull(myEventFrame.Attributes[Constants.AF_ATTRIBUTE_NAME]);
            }


        }

        /// <summary>
        /// Test CreateConfig
        /// </summary>
        [Test]
        public void CreateConfigTest()
        {
            bool? includeChildElements = null;
            instance.CreateConfig(webId, includeChildElements);
        }

        /// <summary>
        /// Test CreateEventFrame
        /// </summary>
        [Test]
        public void CreateEventFrameTest()
        {
            PIEventFrame childEventFrame = new PIEventFrame()
            {
                Name = Constants.AF_EVENT_FRAME_NAME + "3",
                StartTime = "*-2d",
                EndTime = "*-1d"
            };
            instance.CreateEventFrame(webId, childEventFrame);
            string path = Constants.AF_EVENT_FRAME_PATH;
            AFEventFrame myEventFrame = AFObject.FindObject(path) as AFEventFrame;
            myEventFrame.Refresh();
            Assert.IsNotNull(myEventFrame.EventFrames[childEventFrame.Name]);
        }

        /// <summary>
        /// Test CreateSearchByAttribute
        /// </summary>
        [Test]
        public void CreateSearchByAttributeTest()
        {
            string templateWebId = client.ElementTemplate.GetByPath(Constants.AF_EVENT_FRAME_TEMPLATE_PATH).WebId;
            List<PIValueQuery> valueQueries = new List<PIValueQuery>();
            valueQueries.Add(new PIValueQuery("Level", null, 1000, "LessThan"));
            PISearchByAttribute search = new PISearchByAttribute()
            {
                SearchRoot = null,
                ElementTemplate = templateWebId,
                ValueQueries = valueQueries
            };

            var response = instance.CreateSearchByAttributeWithHttpInfo(search);
            string location = response.Headers.Where(h => h.Key == "Location").First().Value;
            Assert.IsTrue(location.Substring(0, 5) == "https");
            Assert.IsInstanceOf<ApiResponse<PIItemsEventFrame>>(response, "response is Object");
        }

        /// <summary>
        /// Test CreateSecurityEntry
        /// </summary>
        [Test]
        public void CreateSecurityEntryTest()
        {
            PISecurityEntry securityEntry = new PISecurityEntry();
            securityEntry.SecurityIdentityName = Constants.AF_SECURITY_IDENTITY_NAME;
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin" };
            securityEntry.DenyRights = new List<string>() { "ReadWriteData", "Subscribe", "SubscribeOthers", "Annotate", "None" };
            bool? applyToChildren = null;
            instance.CreateSecurityEntry(webId, securityEntry, applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == Constants.AF_SECURITY_IDENTITY_NAME).FirstOrDefault();
            Assert.IsNotNull(secEntry);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            string path = Constants.AF_EVENT_FRAME_PATH;
            instance.Delete(webId);
            AFDatabase db = StandardPISystem.Databases[Constants.AF_DATABASE_NAME];
            db.Refresh();
            AFEventFrame eventFrame = AFObject.FindObject(path) as AFEventFrame;
            Assert.IsNull(eventFrame);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();

        }

        /// <summary>
        /// Test DeleteAnnotation
        /// </summary>
        [Test, Order(5)]
        public void DeleteAnnotationTest()
        {
            var result = instance.GetAnnotations(webId, null);
            PIAnnotation annotation = result.Items.Where(m => m.Name == Constants.AF_EVENT_FRAME_ANNOTATION_NAME).FirstOrDefault();
            annotation.Value = "odosdsaaCSWCCSA";
            string id = annotation.Id.ToString();

            instance.DeleteAnnotation(webId: webId, id: id);
            string path = Constants.AF_EVENT_FRAME_PATH;
            AFDatabase db = StandardPISystem.Databases[Constants.AF_DATABASE_NAME];
            db.Refresh();
            AFEventFrame eventFrame = AFObject.FindObject(path) as AFEventFrame;
            AFAnnotation ann = eventFrame.GetAnnotations().Where(an => an.Name == Constants.AF_EVENT_FRAME_ANNOTATION_NAME).FirstOrDefault();
            Assert.IsNull(ann);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();
        }

        /// <summary>
        /// Test DeleteSecurityEntry
        /// </summary>
        [Test]
        public void DeleteSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            bool? applyToChildren = null;
            instance.DeleteSecurityEntry(webId: webId, name: name, applyToChildren: applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == name).FirstOrDefault();
            Assert.IsNull(secEntry);
        }

        /// <summary>
        /// Test ExecuteSearchByAttribute
        /// </summary>
        [Test]
        public void ExecuteSearchByAttributeTest()
        {
            string templateWebId = client.ElementTemplate.GetByPath(Constants.AF_EVENT_FRAME_TEMPLATE_PATH).WebId;
            List<PIValueQuery> valueQueries = new List<PIValueQuery>();
            valueQueries.Add(new PIValueQuery("Level", null, 1000, "LessThan"));
            PISearchByAttribute search = new PISearchByAttribute()
            {
                SearchRoot = null,
                ElementTemplate = templateWebId,
                ValueQueries = valueQueries
            };

            var response2 = instance.CreateSearchByAttributeWithHttpInfo(search);
            string location = response2.Headers.Where(h => h.Key == "Location").First().Value;



            string searchId = location.Substring(client.BaseUrl.Length + 31);
            string searchMode = null;
            string startTime = null;
            string endTime = null;
            string nameFilter = null;
            string referencedElementNameFilter = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.ExecuteSearchByAttribute(
                searchId: searchId,
                searchMode: searchMode,
                startTime: startTime,
                endTime: endTime,
                nameFilter: nameFilter,
                referencedElementNameFilter: referencedElementNameFilter,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<Object>(response, "response is Object");
        }

        /// <summary>
        /// Test FindEventFrameAttributes
        /// </summary>
        [Test]
        public void FindEventFrameAttributesTest()
        {

            string searchMode = null;
            string startTime = null;
            string endTime = null;
            string eventFrameNameFilter = null;
            string eventFrameDescriptionFilter = null;
            string referencedElementNameFilter = null;
            string eventFrameCategory = null;
            string eventFrameTemplate = null;
            string attributeNameFilter = null;
            string attributeDescriptionFilter = null;
            string attributeCategory = null;
            string attributeType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.FindEventFrameAttributes(webId,
                searchMode: searchMode,
                startTime: startTime,
                endTime: endTime,
                eventFrameNameFilter: eventFrameNameFilter,
                eventFrameDescriptionFilter: eventFrameDescriptionFilter,
                referencedElementNameFilter: referencedElementNameFilter,
                eventFrameCategory: eventFrameCategory,
                eventFrameTemplate: eventFrameTemplate,
                attributeNameFilter: attributeNameFilter,
                attributeDescriptionFilter: attributeDescriptionFilter,
                attributeCategory: attributeCategory,
                attributeType: attributeType,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAttribute>(response, "response is PIItemsAttribute");
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIEventFrame>(response, "response is PIEventFrame");
            Assert.IsTrue(response.Name == Constants.AF_EVENT_FRAME_NAME);
        }

        /// <summary>
        /// Test GetAnnotationById
        /// </summary>
        [Test, Order(3)]
        public void GetAnnotationByIdTest()
        {
            var result = instance.GetAnnotations(webId, null);
            string id = result.Items.First().Id.ToString();
            string selectedFields = null;
            var response = instance.GetAnnotationById(webId: webId, id: id, selectedFields: selectedFields);
            Assert.IsInstanceOf<PIAnnotation>(response, "response is PIAnnotation");
            Assert.IsTrue(response.Name == Constants.AF_EVENT_FRAME_ANNOTATION_NAME);
        }

        /// <summary>
        /// Test GetAnnotations
        /// </summary>
        [Test, Order(2)]
        public void GetAnnotationsTest()
        {
            string selectedFields = null;
            var response = instance.GetAnnotations(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAnnotation>(response, "response is PIItemsAnnotation");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetAttributes
        /// </summary>
        [Test]
        public void GetAttributesTest()
        {
            string nameFilter = null;
            string categoryName = null;
            string templateName = null;
            string valueType = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            bool? showExcluded = null;
            bool? showHidden = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetAttributes(webId, nameFilter: nameFilter, categoryName: categoryName, templateName: templateName, valueType: valueType, searchFullHierarchy: searchFullHierarchy, sortField: sortField, sortOrder: sortOrder, startIndex: startIndex, showExcluded: showExcluded, showHidden: showHidden, maxCount: maxCount, selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsAttribute>(response, "response is PIItemsAttribute");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {

            string path = Constants.AF_EVENT_FRAME_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIEventFrame>(response, "response is PIEventFrame");
            Assert.IsTrue(response.Name == Constants.AF_EVENT_FRAME_NAME);
        }

        /// <summary>
        /// Test GetCategories
        /// </summary>
        [Test]
        public void GetCategoriesTest()
        {
            string selectedFields = null;
            var response = instance.GetCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsElementCategory>(response, "response is PIItemsCategory");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetEventFrames
        /// </summary>
        [Test]
        public void GetEventFramesTest()
        {
            string searchMode = null;
            string startTime = null;
            string endTime = null;
            string nameFilter = null;
            string referencedElementNameFilter = null;
            string categoryName = null;
            string templateName = null;
            string referencedElementTemplateName = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetEventFrames(webId,
                searchMode: searchMode,
                startTime: startTime,
                endTime: endTime,
                nameFilter: nameFilter,
                referencedElementNameFilter: referencedElementNameFilter,
                categoryName: categoryName,
                templateName: templateName,
                referencedElementTemplateName: referencedElementTemplateName,
                searchFullHierarchy: searchFullHierarchy,
                sortField: sortField,
                sortOrder: sortOrder,
                startIndex: startIndex,
                maxCount: maxCount,
                selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsEventFrame>(response, "response is PIItemsEventFrame");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetReferencedElements
        /// </summary>
        [Test]
        public void GetReferencedElementsTest()
        {
            string selectedFields = null;
            var response = instance.GetReferencedElements(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsElement>(response, "response is PIItemsElement");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurity
        /// </summary>
        [Test]
        public void GetSecurityTest()
        {
            List<string> userIdentity = new List<string>() { @"marc\marc.adm", @"marc\marc.user" };
            bool? forceRefresh = null;
            string selectedFields = null;
            var response = instance.GetSecurity(webId, userIdentity, forceRefresh, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityRights>(response, "response is PIItemsSecurityRights");
        }

        /// <summary>
        /// Test GetSecurityEntries
        [Test]
        public void GetSecurityEntriesTest()
        {
            string nameFilter = null;
            string selectedFields = null;
            var response = instance.GetSecurityEntries(webId, nameFilter, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityEntryByName
        /// </summary>
        [Test]
        public void GetSecurityEntryByNameTest()
        {
            string name = "Administrators";
            string selectedFields = null;
            var response = instance.GetSecurityEntryByName(webId: webId, name: name, selectedFields: selectedFields);
            Assert.IsInstanceOf<PISecurityEntry>(response, "response is PISecurityEntry");
            Assert.IsTrue(response.Name == name);
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            string path = Constants.AF_EVENT_FRAME_PATH;
            PIEventFrame eventFrame = instance.GetByPath(path, null);
            eventFrame.Id = null;
            eventFrame.Description = "New swagger event frame description";
            eventFrame.Links = null;
            eventFrame.Path = null;
            eventFrame.WebId = null;
            eventFrame.HasChildren = null;
            eventFrame.AcknowledgedBy = null;
            eventFrame.Security = null;
            eventFrame.AcknowledgedDate = null;
            eventFrame.IsAcknowledged = null;
            eventFrame.IsAnnotated = null;
            eventFrame.IsLocked = null;
            eventFrame.CanBeAcknowledged = null;
            eventFrame.AreValuesCaptured = null;
            instance.Update(webId, eventFrame);

            StandardPISystem.Refresh();
            AFEventFrame myEventFrame = AFObject.FindObject(path) as AFEventFrame;
            myEventFrame.Refresh();
            myEventFrame.Database.Refresh();
            if (myEventFrame != null)
            {
                Assert.IsTrue(myEventFrame.Description == eventFrame.Description);
            }
        }

        /// <summary>
        /// Test UpdateAnnotation
        /// </summary>
        [Test, Order(4)]
        public void UpdateAnnotationTest()
        {
            var result = instance.GetAnnotations(webId, null);
            PIAnnotation annotation = result.Items.Where(m => m.Name == Constants.AF_EVENT_FRAME_ANNOTATION_NAME).FirstOrDefault();
            annotation.Value = "odosdsaaCSWCCSA";
            string id = annotation.Id.ToString();
            annotation.Id = null;
            annotation.CreationDate = null;
            annotation.Creator = null;
            annotation.Modifier = null;
            annotation.ModifyDate = null;
            annotation.Links = null;
            instance.UpdateAnnotation(webId: webId, id: id, annotation: annotation);

            string path = Constants.AF_EVENT_FRAME_PATH;
            AFEventFrame eventFrame = AFObject.FindObject(path) as AFEventFrame;
            eventFrame.Refresh();
            IList<AFAnnotation> annotations = eventFrame.GetAnnotations();
            string afAnnValue = annotations.Where(m => m.Name == annotation.Name).First().Value.ToString();
            Assert.IsTrue(afAnnValue == annotation.Value.ToString());

        }

        /// <summary>
        /// Test UpdateSecurityEntry
        /// </summary>
        [Test]
        public void UpdateSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin", "Subscribe", "ReadWriteData" };
            securityEntry.DenyRights = new List<string>() { "SubscribeOthers", "Annotate", "None" };
            securityEntry.Name = null;
            securityEntry.Links = null;
            securityEntry.SecurityIdentityName = null;
            bool? applyToChildren = null;
            instance.UpdateSecurityEntry(webId: webId, name: name, securityEntry: securityEntry, applyToChildren: applyToChildren);

            PISecurityEntry securityEntryUpdated = instance.GetSecurityEntryByName(webId: webId, name: name);
            Assert.IsTrue(securityEntry.AllowRights.Count == securityEntryUpdated.AllowRights.Count);
        }

    }

}
